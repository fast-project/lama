/*! 

\page page_logging Logging

<h2>Importance of Logging</h2>

Inserting log statements into code is a low-tech method for debugging it. 
It may also be the only way because debuggers are not always available or applicable. 
This is usually the case for multithreaded applications and distributed applications at large.

Experience indicates that logging is an important component of the development cycle. 
It offers several advantages. It provides precise context about a run of the application. 
Once inserted into the code, the generation of logging output requires no human intervention.
Moreover, log output can be saved in persistent medium to be studied at a later time. 
In addition to its use in the development cycle, a sufficiently rich logging package 
can also be viewed as an auditing tool.

Logging does have its drawbacks. It can slow down an application. If too verbose, it can 
cause scrolling blindness. To alleviate these concerns, logging facilities of LAMA
are designed to be reliable, fast and extensible.

<h2>Support of Logging</h2>

The LAMA library makes heavy use of logging statements. These logging features
can be enabled at runtime by setting the environment variable LOG4LAMA to the file
that contains the logger configuration.

\code
export SCAI_LOG=config
\endcode

The configuration file looks as follows:

\code
# set default for root and all loggers
 = ERROR        
Vector = DEBUG
Matrix = INFO
Matrix.SparseMatrix = TRACE
# general format: <class> = <Logging Level>
\endcode

<h2>Logging Level</h2>

 - TRACE: even more detailed than DEBUG
 - DEBUG: designates fine-grained informational events that are most useful to debug an application.
 - INFO: informational messages that highlight the progress of the application at coarse-grained level.
 - WARN: designates potentially harmful situations.
 - ERROR: error events that might still allow the application to continue running.
 - FATAL: designates very severe error events that will presumably lead the application to abort.

By default, all loggers of LAMA are set to level WARN. This implies that logging
messages only appear in harmful and potentially harmful situations.

<h2>Hierarchical Structure of Loggers</h2>

Loggers are structured hierarchically like a tree. The root of the tree is the root logger.
All other loggers are descendants of this logger. The dot sign indicates a subtree.

 - Vector is a direct descendant of the root logger
 - Matrix.CSRSparse is a direct descendent of Matrix

The hierarchy of loggers allows to set levels and handlers for a whole bunch of loggers.

<h2>Available Loggers</h2>

Nearly for all C++ classes loggers are available. Here are the most important ones:

 - Vector: vector and operations on it
 - Matrix: matrix and operations on it

*/
