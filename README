##########################################################################
        LAMA (Version 1.0.0 Alpamayo)
##########################################################################

For building LAMA on your system please consider the installation
requirements below and install required packages. 

A description on how to build LAMA is given afterwards or refer to our
homepage www.libama.org --> Documentation --> Installation

##########################################################################

REQUIREMENTS
 * CMake >= 2.8
 * C/C++ compiler (optional: OpenMP 2.0)
 * Boost-Library (common, thread, test and regex(optional for tests))
 * BLAS-Library (Intel MKL, ATLAS, Fortran BLAS) (optional: ScaLAPack)
 * CUDA (optional) (with cublas & thrust)
 * MPI (optional)
 * Vampir (optional)
 * Documentation (optional):
   - doxygen for generating the documentation
   - sphinx for user documentation
   - latex for pdf creation of user documentation

##########################################################################

create a build directory and change to it
 $ mkdir <build>
 $ cd <build>

run cmake and point to the LAMA-src dir:
 $ cmake [options] <project-root>/src

You can set environment variables in one of the following ways:

  export ENV1=<value1>
  export ENV2=<value2>
  cmake <src/dir>

  or

  cmake -D ENV1=<value1> -D ENV2=<value2>  <src_dir>

The following environment variables might be helpful to find
all required and optional packages:

  BOOST_ROOT=<install/dir/of/boost>
  MKL_ROOT=<install/dir/of/MKL>

For MPI, you should have mpicc or mpicxx in your path. CMake will then
identify the vendor and necessary link flags for MPI compilation.
Find all CMake Variables online at Documentation --> Installation --> Configuration.

For a Release build define -D CMAKE_BUILD_TYPE=Release.
To install LAMA tell CMake the install dir by -D CMAKE_INSTALL_PREFIX=<installation-dir>

To build with the intel compiler execute
 $ export CC=<c/compiler>
 $ export CXX=<c++/compiler>

BUILD

 $ make [-j]

INSTALL

 $ make install

RUN DOXYGEN (GENERATE API DOCUMENTATION)

 $ make doc
 
RUN SPHINX (GENERATE USER DOCUMENTATION)

 $ make userdoc
 
INSTALLATION

 $ make install