###
 # @file lama/cuda/CMakeLists.txt
 #
 # @license
 # Copyright (c) 2009-2013
 # Fraunhofer Institute for Algorithms and Scientific Computing SCAI
 # for Fraunhofer-Gesellschaft
 #
 # Permission is hereby granted, free of charge, to any person obtaining a copy
 # of this software and associated documentation files (the "Software"), to deal
 # in the Software without restriction, including without limitation the rights
 # to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 # copies of the Software, and to permit persons to whom the Software is
 # furnished to do so, subject to the following conditions:
 #
 # The above copyright notice and this permission notice shall be included in
 # all copies or substantial portions of the Software.
 #
 # THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 # IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 # FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 # AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 # LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 # OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 # SOFTWARE.
 # @endlicense
 #
 # @brief Separate building of libamacuda after installation of LAMA
 # @author Thomas Brandes
 # @date 01.07.2013
 # @since 1.0.1
###

### Set required CMake version
cmake_minimum_required (VERSION 2.8)

project ( LamaCUDA CXX )

include ( FindCUDA )

set ( CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/../../../CMake/Modules" )

### Take additional settings used for LAMA, e.g. compiler flags
include ( CUDAFlags )

################################################
#  Find LAMA installation                      #
################################################

# Initial guess for LAMA_HOME by environment

# If LAMA_HOME was defined in the environment, use it.
if ( NOT LAMA_HOME AND NOT $ENV{LAMA_HOME} STREQUAL "" )
    set( LAMA_HOME $ENV{LAMA_HOME} )
endif( NOT LAMA_HOME AND NOT $ENV{LAMA_HOME} STREQUAL "" )

# If LAMAHOME was defined in the environment, use it.
if ( NOT LAMA_HOME AND NOT $ENV{LAMAHOME} STREQUAL "" )
    set( LAMA_HOME $ENV{LAMAHOME} )
endif( NOT LAMA_HOME AND NOT $ENV{LAMAHOME} STREQUAL "" )

# If LAMA_ROOT was defined in the environment, use it.
if ( NOT LAMA_HOME AND NOT $ENV{LAMA_ROOT} STREQUAL "")
  set(LAMA_HOME $ENV{LAMA_ROOT})
endif( NOT LAMA_HOME AND NOT $ENV{LAMA_ROOT} STREQUAL "")

if( LAMA_HOME )
    file( TO_CMAKE_PATH ${LAMA_HOME} LAMA_HOME )
endif( LAMA_HOME )

# cache LAMA_HOME, might be defined manually
set( LAMA_HOME ${LAMA_HOME} CACHE PATH "LAMA installation directory" )

find_library( LAMA_LIB
              NAMES ama
              HINTS ${LAMA_HOME}/lib )

find_library( SCAI_LOG_LIB
              NAMES log4lama
              HINTS ${LAMA_HOME}/lib )

#################################################################
#  Inherit ASSERT, LOG, and TRACE level from installation       #
#################################################################

if ( EXISTS "${LAMA_HOME}/include/lama.hpp" )

    # read the content of lama.hpp in a variable
    file ( STRINGS ${LAMA_HOME}/include/lama.hpp LAMA_HPP )

    # match for defintions
    string( REGEX MATCH "SCAI_ASSERT_LEVEL_[A-Z]*" SCAI_ASSERT_LEVEL "${LAMA_HPP}" )
    string( REGEX MATCH "SCAI_LOG_LEVEL_[A-Z]*" SCAI_LOG_LEVEL "${LAMA_HPP}" )
    string( REGEX MATCH "SCAI_TRACE_LEVEL_[A-Z]*" SCAI_TRACE_LEVEL "${LAMA_HPP}" )

    # cache the defintions
    set( SCAI_ASSERT_LEVEL ${SCAI_ASSERT_LEVEL} CACHE STRING "Taken over from LAMA installation" )
    set( SCAI_LOG_LEVEL ${SCAI_LOG_LEVEL} CACHE STRING "Taken over from LAMA installation" )
    set( SCAI_TRACE_LEVEL ${SCAI_TRACE_LEVEL} CACHE STRING "Taken over from LAMA installation" )

    # take LAMA_HOME also as installation directory

    if ( CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT )
        set( CMAKE_INSTALL_PREFIX ${LAMA_HOME} CACHE PATH "Installation directory same as LAMA_HOME" FORCE )
    endif( CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT )

else ( EXISTS "${LAMA_HOME}/include/lama.hpp" )

    message( STATUS "Cannot set LAMA levels as ${LAMA_HOME}/include/lama.hpp is not available" )

endif ( EXISTS "${LAMA_HOME}/include/lama.hpp" )

# CMAKE configuration variable that guarantees adding rpath for installed
# libraries; very useful so that installed library can be used without 
# complex settings of LD_LIBRARY_PATH

set ( CMAKE_SKIP_BUILD_RPATH FALSE )
set ( CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/lib")
set ( CMAKE_BUILD_WITH_INSTALL_RPATH FALSE )
set ( CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE )

# make sure that the default is a RELEASE

if ( NOT CMAKE_BUILD_TYPE)
   set(CMAKE_BUILD_TYPE RELEASE CACHE STRING
      "Choose the type of build, options are: None Debug Release."
      FORCE)
endif ( NOT CMAKE_BUILD_TYPE)

### Set C++ Sources ###
set ( CXX_SOURCES
        CUDABLAS1.cpp
        CUDABLAS2.cpp
        CUDABLAS3.cpp
        CUDAContext.cpp
        CUDAContextManager.cpp
        CUDAError.cpp
        CUDAException.cpp
        CUDAHostContext.cpp
        CUDAHostContextManager.cpp
        CUDALAPACK.cpp
        CUDAStreamSyncToken.cpp
        CUDASettings.cpp
    )

### Set CUDA Sources ###
set ( CUDA_SOURCES
        blas1.cu
        blas3.cu
        emptyKernel.cu
        CUDAUtils.cu
        CUDACSRUtils.cu
        CUDAELLUtils.cu
        CUDAJDSUtils.cu
        CUDADIAUtils.cu
        CUDACOOUtils.cu
    )
    
### add interfaces to cuSPASE library, Version 2 (since CUDA 5.0) if available

if ( CUSPARSE_V2 )
    set ( CUDA_SOURCES ${CUDA_SOURCES} CUSparseCSRUtils.cu )
endif ( CUSPARSE_V2 )

### add definitions
add_definitions( -D${SCAI_ASSERT_LEVEL} -D${SCAI_LOG_LEVEL} -D${SCAI_TRACE_LEVEL} )

### set include directories ### 
include_directories ( . ${CMAKE_SOURCE_DIR}/../.. ${CUDA_INCLUDE_DIRS} )

# Linux requires explicit CUDA compilation of *.cu files
cuda_compile ( CUDA_FILES ${CUDA_SOURCES} )

### add CUDA library ###
add_library( amacuda SHARED ${CXX_SOURCES} ${CUDA_FILES} )

### target link libraries ###
target_link_libraries( amacuda
                        ${LAMA_LIB}
                        ${SCAI_LOG_LIB}
                        ${CUDA_cusparse_LIBRARY}
                        ${CUDA_cublas_LIBRARY} 
                        ${CUDA_CUDART_LIBRARY}
                        ${CUDA_CUDA_LIBRARY}
                     )

### install library
install ( TARGETS amacuda DESTINATION lib )
file( GLOB CXX_HEADERS *.hpp )
install ( FILES ${CXX_HEADERS} DESTINATION include/lama/cuda )

