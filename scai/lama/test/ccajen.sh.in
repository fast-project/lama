#
#  @file cca.sh
# 
#  @license
#  Copyright (c) 2009-2013
#  Fraunhofer Institute for Algorithms and Scientific Computing SCAI
#  for Fraunhofer-Gesellschaft
# 
#  Permission is hereby granted, free of charge, to any person obtaining a copy
#  of this software and associated documentation files (the "Software"), to deal
#  in the Software without restriction, including without limitation the rights
#  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#  copies of the Software, and to permit persons to whom the Software is
#  furnished to do so, subject to the following conditions:
# 
#  The above copyright notice and this permission notice shall be included in
#  all copies or substantial portions of the Software.
# 
#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#  SOFTWARE.
#  @endlicense
# 
#  @brief This file is a shellscript, which contains all necessary steps to 
#         measure code coverage of LAMA.
#  @author: Alexander BÃ¼chel, Lauretta Schubert
#  @date 15.08.2012
#  @since 1.0.0
#

#!/bin/bash

path_lcov=$1
path_genhtml=$2
error_count=0

# Creating dir named by YEAR_MONTH_DAY-HOURMINUTE
dirname=$(date +%y_%m_%d-%H%M)
echo "Create coverage directory: ${dirname}"
mkdir ${dirname}

cd ${dirname}

# Clearing up environment
${path_lcov} --base-directory ../.. --directory ../.. --zerocounters


cd ..

export LAMA_LOG=ERROR

#for i in TRACE DEBUG INFO WARN ERROR OFF # TRACE DEBUG INFO WARN are causing failures
#do
    
#for i in VT TIME SIMPLE OFF #SIMPLE causes failure
for i in VT TIME OFF 
do

	export LAMA_TRACE_LEVEL=$i
	echo LAMA_TRACE_LEVEL=$i
	
	# Running tests serial
	echo "Running serial tests"
	./lama_test >/dev/null
	error_count=$(($error_count + $?))
	
	if [ -d distributed ];
	then
		# Running parallel tests serial and with two processes
		cd distributed
		echo "Running distributed tests serial"
		./lama_dist_test >/dev/null
	    error_count=$(($error_count + $?))
	
		#for i in 2 3 4;
		#do
		#	echo "Running distributed tests with $i processes"
		#	mpirun -np $i ./lama_dist_test >/dev/null
		#	error_count=$(($error_count + $?))
		#done
		cd ..
	fi
	
	if [ -d cuda ];
	then
		#Running CUDA tests
		cd cuda
		echo "Running cuda tests"
		./lama_cuda_test >/dev/null
	    error_count=$(($error_count + $?))
		cd ..
	fi

done

cd ${dirname}

#Running lcov and creating data
${path_lcov} --base-directory ../.. --directory ../.. --capture --output-file=data.info
error_count=$(($error_count + $?))

#Extracting just Sourcefiles from LAMA/src/*
${path_lcov} --extract data.info "@CMAKE_SOURCE_DIR@/*" --output-file=data.info
error_count=$(($error_count + $?))

# Generating html-structure
${path_genhtml} data.info
error_count=$(($error_count + $?))

if [[ $error_count != 0 ]] ; then
    exit 1
fi
