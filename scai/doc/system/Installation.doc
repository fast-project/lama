/*! 

\page page_linuxinstallation Linux Installation

<h2>Download</h2>

You can check out the latest version via svn by the following commmand:

\code
svn co https://libama.svn.sourceforge.net/svnroot/libama/trunk lama
\endcode

Or you can download the tar file by this link:

\code
libama.svn.sourceforge.net/viewvc/libama/trunk/?view=tar
\endcode

<h2>Build</h2>

Since we use CMake to control the software compilation and installation process, you should
have an actual CMake version (2.8 or later) available on your platform.
As recommended for CMake in general, you should use an own build directory and not
build within the source directory.

\code
cd lama
mkdir release
cd release
cmake -DMKL_ROOT=/opt/intel/mkl -DBOOST_ROOT=/home/boost/ -DCMAKE_BUILD_TYPE=Release ../src
\endcode

By using ccmake you can set individual items that will also be discussed later on this page.

 - \c BOOST_ROOT home directory of your BOOST installation, /usr if you use a Linux installation
 - \c CMAKE_BUILD_TYPE Release, or Debug
 - \c CMAKE_INSTALL_PREFIX directory where LAMA should be installed later
 - \c CUDA_TOOLKIT_ROOT_DIR optional, directory of your CUDA installation
 - \c SCAI_ASSERT_LEVEL ERROR recommended, alternatively DEBUG
 - \c SCAI_LOG_LEVEL INFO recommended, alternatively DEBUG or more detailled TRACE
 - \c USE_CUDA switch ON or OFF
 - \c USE_MPI switch ON or OFF

To build LAMA just invoke make in your build directory. Parallel builds are supported
and recommended.

make -j <number-of-build-processes>

<h2>Boost</h2>

LAMA uses some Boost libraries and therefore you must have an actual
version (1.34 or later) installed on your machine.

Many linux installations provide an actual release of Boost and if Boost is
installed, LAMA should have no problems to find it.

If for any reasons no actual Boost installation is available, you must download
and install it. Please make sure that you build also the dynamic libraries.
After installation you can tell cmake the location of installation
by the variable \c BOOST_ROOT as described above or by setting an environment
variable.

\code
export BOOST_ROOT=<path-to-boost-installation>
\endcode

Via ccmake you can verify that the Boost variables needed for LAMA have correct
values.

 - \c BOOST_ROOT  \c /home/brandes/local/boost_1_46_0                                                                       
 - \c Boost_INCLUDE_DIR \c /home/brandes/local/boost_1_46_0/include                                                               
 - \c Boost_LIBRARY_DIRS \c /home/brandes/local/boost_1_46_0/lib                                                                   
 - \c Boost_PROGRAM_OPTIONS_LIBRARY \c /home/brandes/local/boost_1_46_0/lib/libboost_program_options.so                                       
 - \c Boost_THREAD_LIBRARY \c /home/brandes/local/boost_1_46_0/lib/libboost_thread.so                                                
 - \c Boost_UNIT_TEST_FRAMEWORK_LIBR \c /home/brandes/local/boost_1_46_0/lib/libboost_unit_test_framework.so                                   

<h2>BLAS and LAPACK</h2>

We recommend using Intel MKL libraries for BLAS, LAPACK and (optional) ScalLAPACK routines.
If the environment variable MKL_ROOT is set to the corresponding installation directory,
there should be no problems at all.

\code
export MKL_ROOT=<path-to-mkl-installation>
\endcode

If the MKL is not available, LAMA tries to find other BLAS or LAPACK libraries. If
it fails, you will see a typical message like this:

\code
  Could NOT find LAMA_BLAS (missing: LAMA_BLAS_LIBRARIES)
\endcode

Unfortunately, the CMake modules have some problems in finding the BLAS and LAPACK
libraries. Especially the module \c FindLAPACK.cmake has the problem that
in some versions the \c CMAKE_FIND_LIBRARY_SUFFIXES variable was 
misspelled as \c CMAKE_FIND_LIBRRAY_SUFFIXES. Here is a solution how
to specify the corresponding libraries directly:

\code
  cmake -DBLAS_blas_LIBRARY=/usr/lib64/libblas.so.3  \
        -DLAPACK_lapack_LIBRARY=/usr/lib64/liblapack.so.3
\endcode

ScaLAPACK is optional and only needed if you need to build the inverse of a distributed matrix.

<h2>MPI</h2>

If you want to use MPI, please make sure that a version of MPI (e.g. OpenMPI)
is installed on your machine, and that mpirun is in your path. By this way,
the FindMPI module of cmake will recognize your MPI installation.

LAMA itself uses the following MPI variables:

 - \c MPI_CXX_COMPILER for the MPI C++ compiler, e.g. mpicxx
 - \c MPI_CXX_INCLUDE_PATH for the include file, e.g. /usr/local/openmpi-1.4.3/include
 - \c MPI_CXX_LIBRARIES for the libraries to be linked, e.g. 
   \c /usr/local/openmpi-1.4.3/lib/libmpi_cxx.so;/usr/local/openmpi-1.4.3/lib/libmpi.so;...

MPI is optional and LAMA can be built without it. But you will not be able to take advantage
of distributed vectors and matrices.

<h2>CUDA</h2>

LAMA supports GPU accelearators via CUDA. This feature is optional.

If CUDA is installed on your machine, LAMA should find it if it is
in one of the system directories. Otherwise you can give cmake the hint
by the variable \c LAMA_ROOT.

<h2>API Documentation</h2>

To build LAMAs doxygen API documentation call

\code
make doc
\endcode

Documentation is available in the directory \c <project-root>/doc/doxygen/html, open
the file \c index.html in your browser and the system documentation is available.

<h2>Install</h2>

To install LAMA to the configured installation path just call

\code
make install
\endcode

in your build directory. 

For your convenience, we recommend to set the environment variable \c LAMA_ROOT
to this installation directory.

\code
export LAMA_ROOT=<installation-directory>
\endcode

<h2>Running Examples</h2>

Examples can be found in the directory \c <project-root>/share/tutorial.

<h2>Running Test</h2>

\code
cd test
export SCAI_LOG=config
export LAMA_UNSUPPORTED=IGNORE
lama_test 
\endcode

<h2>Troubleshooting</h2>

If some software components could not be found, we recommend using ccmake where
you can set variables individually.

\code
ccmake .
\endcode

In case of troubles with MPI or CUDA, please make sure that your installation
works at least without these optional features.

*/

