/*! 

\page page_matrix Matrix

<h2>Introduction</h2>

An object of the class Matrix stands for a distributed 
matrix. A matrix is always distributed by the rows.

<h2>Construction of a Matrix</h2>

The class Matrix itself is an abstract class, so you cannot
construct an object of this class. Therefore only constructors
of derived classes can be called. Nevertheless, all these
classes offer constructors with the same interface.

\code
DenseMatrix<float> dfMatrix( m, n );
CSRSparseMatrix<float> csrfMatrix( m, n );
ELLSparseMatrix<float> ellfMatrix( m, n );
\endcode

So the following examples of constructors can be used
for all matrices.

With any matrix storage (any format and any value type) you 
can construct a replicated matrix with the shape of the matrix
storage. The storage data will be copied to the corresponding
format and value type of the matrix.

\code
ELLSparseMatrix<float> ellfMatrix( const _MatrixStorage& storage );
\endcode

Furthermore, you can construct a new matrix by a copying any other
matrix. While the distributions of the input matrix are taken over
for the new matrix, the value type, kind and format of the matrix
might be converted implicitly.

\code
CSRSparseMatrix<double> matrix( const Matrix& matrix );
\endcode

<h2>Properties of a Matrix</h2>

The size of a matrix is queried by the routines
\c getNumRows and \c getNumColumns. These sizes stand
for the global size of the matrix and NOT for the local
size that is owned by the calling process.

\code
const IndexType numRows = matrix.getNumRows();
const IndexType numColumns = matrix.getNumColumns();
\endcode

The distribution of the rows is returned by either
a call of \c getDistribution or \c getDistributionPtr.
The second call returns the shared pointer for the distribution
instead of just a reference to it; the shared pointer is used
in cases where the distribution will also be used for other 
data structures.

\code
const Distribution& rowDist = matrix.getDistribution();
DistributionPtr rowDistPtr = matrix.getDistributionPtr();
DenseVector<double> X ( rowDistrPtr );
// Note: matrix.getDistribution().getGlobalSize() == matrix.getNumRows()
\endcode

In a similiar way, two routines are provided for the column 
distribution. Please take into account that the column 
distribution is not used for partioning of the matrix among
processors but only for splitting the row data into separate
parts locally, e.g. into a local and halo part for the sparse matrix.

\code
const Distribution& colDist = matrix.getColDistribution();
DistributionPtr colDistPtr = matrix.getColDistributionPtr();
DenseVector<double> X ( colDistrPtr );
// Note: matrix.getColDistribution().getGlobalSize() == matrix.getNumColumns()
\endcode

The matrix kind, either SPARSE or DENSE, is delivered by the
the method \c getMatrixKind.

\code
Matrix::MatrixKind kind = matrix.getMatrixKind();
if ( kind == Matrix::DENSE )
{
    // write code for a dense matrix
}
else if ( kind == Matrix::SPARSE )
{
    // write code for a sparse matrix
}
\endcode

The value type of the matrix is given by a call of the
method \c getValueType. It might be used together with
the matrix kind to make safe casts to a specific matrix type.

\code
if ( ( matrix.getMatrixKind() == Matrix::DENSE ) &&
     ( matrix.getValueType() == Scalar::FLOAT ) )
{
    DenseMatrix<float>& dfMatrix = dynamic_cast<DenseMatrix<float>& >( matrix );
    ... 
}
else if ( ( matrix.getMatrixKind() == Matrix::SPARSE ) &&
          ( matrix.getValueType() == Scalar::DOUBLE ) )
{
    SparseMatrix<double>& sdMatrix = dynamic_cast<SparseMatrix<double>& >( matrix );
    ...
}
\endcode

\page page_sparsematrix Sparse Matrix

<h2>Sparse Matrix</h2>

Like each matrix, a sparse matrix is distributed by the rows.
Additionally, a column distribution can b specified that
split the local rows into a local and a halo part.

In most situations, the row and column distribution will be the
same. This usually results in a rather small halo part.

\image html SparseMatrix.png "SparseMatrix: rows and colums are distributed"

@todo Add picture for sparse matrix-vector multiplication.

\page page_densematrix Dense Matrix

<h2>Dense Matrix</h2>

For the dense matrix, the column distribution is used
to split the local rows into one block for each partition.

This splitting is especially useful for a matrix-vector
multiplication where the right hand side vector is shifted
in a circular manner. Each processor will see at one time
each part of the vector and can just multiply it with 
the dense block that belongs to the corresponding part.

@todo Add picture for dense matrix-vector multiplication.

*/
