#
# LAMAMVBenchs.beru
#
# Created on 2011-05-22 14:17:03
#         by jiri
#

# Comment in, to add an description of your file, which will be printed out, when using it.
# DESCRIPTION: |
#     description of LAMAMVBenchs.beru by jiri

# Comment in, to add definitions, for not typing benchmark or inputset twice.
# DEFINITIONS: |
#     &alias Name

# The minimal number of repetition of execute( ) within the benchmark.
REP_MIN: 5
#REP_MIN: 1

# The minimal time of repetition of execute( ) within the benchmark in seconds.
TIME_MIN: 0

# The minimal number of repetition of the benchmark, to avoid aberrations.
REP_CTRL: 3
#REP_CTRL: 1

# Registered InputSets.
INPUT_SETS:
    #- Poisson( 1D3P_1000000 )
    #- Poisson( 2D5P_1000_1000 )
    #- Poisson( 2D9P_1000_1000 )
    - Poisson( 3D7P_100_100_100 )
    #- Poisson( 3D27P_100_100_100 )

#SBLAS_CUDA:
    #BENCHMARKS:
        #- "CUDA<double>: 10 iterations ELL CG AMG V-Cycle with 2 Jacobi smoothing steps [NullLogger](150_5)"
        #- "CUDA<double>: 10 iterations JDS CG AMG V-Cycle with 2 Jacobi smoothing steps [NullLogger](150_5)"
        #- "CUDA<double>: 10 iterations CSR CG AMG V-Cycle with 2 Jacobi smoothing steps [NullLogger](150_5)"
    
    #LAUNCH_CONF:
        #OneGPU: "OMP_NUM_THREADS=2"

#SBLAS_CPU:
    #BENCHMARKS:
        #- "CPU<double>: 10 iterations ELL CG AMG V-Cycle with 2 Jacobi smoothing steps [NullLogger](150_5)"
        #- "CPU<double>: 10 iterations JDS CG AMG V-Cycle with 2 Jacobi smoothing steps [NullLogger](150_5)"
        #- "CPU<double>: 10 iterations CSR CG AMG V-Cycle with 2 Jacobi smoothing steps [NullLogger](150_5)"
    
    #LAUNCH_CONF:
        #Serial: "OMP_NUM_THREADS=1"
        #TwoThreads: "OMP_NUM_THREADS=2"
        #FourThreads: "OMP_NUM_THREADS=4"

LAMA:
    # Registered Benchmarks.
    # Benchmarks needing Arguments, are marked the following:
    #     Benchmark (<args>)
    BENCHMARKS:
        - "LAMA<double>: SparseMatrix*Vector - CSR SAMG format"
        - "LAMA<double>: SparseMatrix*Vector - ELLPACK format"
        #- "LAMA<double>: SparseMatrix*Vector - JDS format"

    # Configuration of environment. Replace ID with the name of your configuration
    # launch and the empty spaces with the command you wish to have executed, right
    # before the execution of the benchmark.
    LAUNCH_CONF:
        Serial: "LAMA_CONFIG=LOCAL=HOST:THREADS=1"
        TwoThreads: "LAMA_CONFIG=LOCAL=HOST:THREADS=2"
        FourThreads: "LAMA_CONFIG=LOCAL=HOST:THREADS=4"
        TwoProcs: "mpirun -np 2 -x OMP_NUM_THREADS=1 -x LAMA_CONFIG=LOCAL=HOST:THREADS=1"
        FourProcs: "mpirun -np 4 -x OMP_NUM_THREADS=1 -x LAMA_CONFIG=LOCAL=HOST:THREADS=1"
        TwoProcsFourThreads: "mpirun -np 2 -x OMP_NUM_THREADS=2 -x LAMA_CONFIG=LOCAL=HOST:THREADS=2"
        TwoProcsSync: "mpirun -np 2 -x OMP_NUM_THREADS=1 -x LAMA_CONFIG=LOCAL=HOST:THREADS=1:COMM=SYNC"
        OneGPU: "LAMA_CONFIG=LOCAL=CUDA:THREADS=1:CUDA=0"
        OneGPUTwoThreads: "mpirun -np 2 -x OMP_NUM_THREADS=1 -x LOCAL=CUDA:THREADS=1:CUDA=0,LOCAL=HOST:THREADS=2"

# Put commandline arguments, here.
# CMD: <command-line-arguments>
CMD: --maxrepetition=5 -C --itemlist=-E,MAX -C --columns=n,lc,em,eminm,b

