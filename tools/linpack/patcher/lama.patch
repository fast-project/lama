diff -rupN hpl-2.0/include/hpl_blas.h hpl-2.0PATCH/include/hpl_blas.h
--- hpl-2.0/include/hpl_blas.h	2011-05-31 15:59:58.828227386 +0200
+++ hpl-2.0PATCH/include/hpl_blas.h	2011-05-31 14:56:31.000000000 +0200
@@ -159,18 +175,18 @@ STDC_ARGS(
  * HPL C BLAS macro definition
  * ---------------------------------------------------------------------
  */
-#define    HPL_dswap           cblas_dswap
-#define    HPL_dcopy           cblas_dcopy
-#define    HPL_daxpy           cblas_daxpy
-#define    HPL_dscal           cblas_dscal
-#define    HPL_idamax          cblas_idamax
-
-#define    HPL_dgemv           cblas_dgemv
-#define    HPL_dtrsv           cblas_dtrsv
-#define    HPL_dger            cblas_dger
+#define    HPL_dswap           lama_DSWAP
+#define    HPL_dcopy           lama_DCOPY
+#define    HPL_daxpy           lama_DAXPY
+#define    HPL_dscal           lama_DSCAL
+#define    HPL_idamax          lama_IDAMAX
+
+#define    HPL_dgemv           lama_DGEMV
+#define    HPL_dtrsv           lama_DTRSV
+#define    HPL_dger            lama_DGER
 
-#define    HPL_dgemm           cblas_dgemm
-#define    HPL_dtrsm           cblas_dtrsm
+#define    HPL_dgemm           lama_DGEMM
+#define    HPL_dtrsm           lama_DTRSM
 
 #endif
 
diff -rupN hpl-2.0/src/auxil/HPL_dlange.c hpl-2.0PATCH/src/auxil/HPL_dlange.c
--- hpl-2.0/src/auxil/HPL_dlange.c	2011-05-31 15:59:58.842227386 +0200
+++ hpl-2.0PATCH/src/auxil/HPL_dlange.c	2011-05-31 14:56:31.000000000 +0200
@@ -134,7 +134,7 @@ double HPL_dlange
 /*
  * Find norm_1( A ).
  */
-      work = (double*)malloc( (size_t)(N) * sizeof( double ) );
+      lama_hostAlloc((void**)&work,(size_t)(N) * sizeof( double ) );
       if( work == NULL )
       { HPL_abort( __LINE__, "HPL_dlange", "Memory allocation failed" ); }
       else
@@ -149,7 +149,7 @@ double HPL_dlange
  * Find maximum sum of columns for 1-norm
  */
          v0 = work[HPL_idamax( N, work, 1 )]; v0 = Mabs( v0 );
-         if( work ) free( work );
+         if( work ) lama_hostFree( work );
       }
    }
    else if( NORM == HPL_NORM_I )
@@ -157,7 +157,7 @@ double HPL_dlange
 /*
  * Find norm_inf( A )
  */
-      work = (double*)malloc( (size_t)(M) * sizeof( double ) );
+      lama_hostAlloc((void**)&work,(size_t)(M) * sizeof( double ) );
       if( work == NULL )
       { HPL_abort( __LINE__, "HPL_dlange", "Memory allocation failed" ); }
       else
@@ -173,7 +173,7 @@ double HPL_dlange
  * Find maximum sum of rows for inf-norm
  */      
          v0 = work[HPL_idamax( M, work, 1 )]; v0 = Mabs( v0 );
-         if( work ) free( work );
+         if( work ) lama_hostFree( work );
       }
    }
 
diff -rupN hpl-2.0/src/comm/HPL_packL.c hpl-2.0PATCH/src/comm/HPL_packL.c
--- hpl-2.0/src/comm/HPL_packL.c	2011-05-31 15:59:58.849227386 +0200
+++ hpl-2.0PATCH/src/comm/HPL_packL.c	2011-05-31 14:56:31.000000000 +0200
@@ -134,10 +134,10 @@ int HPL_packL
 /*
  * Temporaries to create the type struct.
  */
-   bufs = (void     * * *)malloc( jbp1 * sizeof( void * *     ) );
-   blen = (int          *)malloc( jbp1 * sizeof( int          ) );
-   disp = (MPI_Aint     *)malloc( jbp1 * sizeof( MPI_Aint     ) );
-   type = (MPI_Datatype *)malloc( jbp1 * sizeof( MPI_Datatype ) );
+   lama_hostAlloc((void**) &bufs, jbp1 * sizeof( void * *     ));
+   lama_hostAlloc((void**) &blen, jbp1 * sizeof( int          ));
+   lama_hostAlloc((void**) &disp,jbp1 * sizeof( MPI_Aint) );
+   lama_hostAlloc((void**) &type,jbp1 * sizeof( MPI_Datatype ));
  
    if( ( bufs != NULL ) && ( blen != NULL ) &&
        ( disp != NULL ) && ( type != NULL ) )
@@ -213,10 +213,10 @@ int HPL_packL
 /*
  * release temporaries
  */
-      if( bufs ) free( bufs );
-      if( blen ) free( blen );
-      if( disp ) free( disp );
-      if( type ) free( type );
+      if( bufs ) lama_hostFree( bufs );
+      if( blen ) lama_hostFree( blen );
+      if( disp ) lama_hostFree( disp );
+      if( type ) lama_hostFree( type );
 /*
  * commit the type 
  */
diff -rupN hpl-2.0/src/grid/HPL_reduce.c hpl-2.0PATCH/src/grid/HPL_reduce.c
--- hpl-2.0/src/grid/HPL_reduce.c	2011-05-31 15:59:58.856227386 +0200
+++ hpl-2.0PATCH/src/grid/HPL_reduce.c	2011-05-31 14:56:31.000000000 +0200
@@ -123,11 +123,10 @@ int HPL_reduce
    i = size - 1; while( i > 1 ) { i >>= 1; d++; }
 
    if( DTYPE == HPL_INT )
-      buffer = (void *)( (int *)   malloc( (size_t)(COUNT) * 
-                                           sizeof( int    ) ) );
+      lama_hostAlloc((void**) &buffer, (size_t)(COUNT) *  sizeof( int    ) );
+    
    else
-      buffer = (void *)( (double *)malloc( (size_t)(COUNT) *
-                                           sizeof( double ) ) );
+      lama_hostAlloc((void**) &buffer, (size_t)(COUNT) *  sizeof( double    ) );
 
    if( !( buffer ) )
    { HPL_pabort( __LINE__, "HPL_reduce", "Memory allocation failed" ); }
@@ -170,7 +169,7 @@ int HPL_reduce
          mask ^= ip2; ip2 <<= 1; d--;
       } while( d );
    }
-   if( buffer ) free( buffer );
+   if( buffer ) lama_hostFree( buffer );
 
    return( hplerr );
 /*
diff -rupN hpl-2.0/src/panel/HPL_pdpanel_disp.c hpl-2.0PATCH/src/panel/HPL_pdpanel_disp.c
--- hpl-2.0/src/panel/HPL_pdpanel_disp.c	2011-05-31 15:59:58.863227386 +0200
+++ hpl-2.0PATCH/src/panel/HPL_pdpanel_disp.c	2011-05-31 14:56:31.000000000 +0200
@@ -87,7 +87,7 @@ int HPL_pdpanel_disp
  * Deallocate the panel resources and panel structure
  */
    mpierr = HPL_pdpanel_free( *PANEL );
-   if( *PANEL ) free( *PANEL );
+   if( *PANEL ) lama_hostFree( *PANEL );
    *PANEL = NULL;
 
    return( mpierr );
diff -rupN hpl-2.0/src/panel/HPL_pdpanel_free.c hpl-2.0PATCH/src/panel/HPL_pdpanel_free.c
--- hpl-2.0/src/panel/HPL_pdpanel_free.c	2011-05-31 15:59:58.870227386 +0200
+++ hpl-2.0PATCH/src/panel/HPL_pdpanel_free.c	2011-05-31 14:56:31.000000000 +0200
@@ -94,8 +94,8 @@ int HPL_pdpanel_free
       vsip_blockdestroy_d( PANEL->Ublock );
 #endif
 
-   if( PANEL->WORK  ) free( PANEL->WORK  );
-   if( PANEL->IWORK ) free( PANEL->IWORK );
+   if( PANEL->WORK  ) lama_hostFree( PANEL->WORK  );
+   if( PANEL->IWORK ) lama_hostFree( PANEL->IWORK );
 
    return( MPI_SUCCESS );
 /*
diff -rupN hpl-2.0/src/panel/HPL_pdpanel_init.c hpl-2.0PATCH/src/panel/HPL_pdpanel_init.c
--- hpl-2.0/src/panel/HPL_pdpanel_init.c	2011-05-31 15:59:58.876227386 +0200
+++ hpl-2.0PATCH/src/panel/HPL_pdpanel_init.c	2011-05-31 14:56:31.000000000 +0200
@@ -209,8 +209,7 @@ void HPL_pdpanel_init
       if( nprow > 1 )                                 /* space for U */
       { nu = nq - JB; lwork += JB * Mmax( 0, nu ); }
 
-      if( !( PANEL->WORK = (void *)malloc( (size_t)(lwork) * 
-                                           sizeof( double ) ) ) )
+      if( 0 != (lama_hostAlloc((void**)&PANEL->WORK,(size_t)(lwork) * sizeof( double ) ) ) )
       {
          HPL_pabort( __LINE__, "HPL_pdpanel_init",
                      "Memory allocation failed" );
@@ -241,8 +241,7 @@ void HPL_pdpanel_init
          lwork += JB * Mmax( 0, nu );
       }
 
-      if( !( PANEL->WORK = (void *)malloc( (size_t)(lwork) *
-                                           sizeof( double ) ) ) )
+      if( 0 != (lama_hostAlloc((void**)&PANEL->WORK,(size_t)(lwork) * sizeof( double ) ) ) )
       {
          HPL_pabort( __LINE__, "HPL_pdpanel_init",
                      "Memory allocation failed" );
@@ -336,7 +336,7 @@ void HPL_pdpanel_init
       lwork = 4 + (9 * JB) + (3 * nprow) + itmp1;
    }
 
-   PANEL->IWORK = (int *)malloc( (size_t)(lwork) * sizeof( int ) );
+   lama_hostAlloc((void **)&PANEL->IWORK,(size_t)(lwork) * sizeof( int ) ); 
 
    if( PANEL->IWORK == NULL )
    { HPL_pabort( __LINE__, "HPL_pdpanel_init", "Memory allocation failed" ); }
diff -rupN hpl-2.0/src/panel/HPL_pdpanel_new.c hpl-2.0PATCH/src/panel/HPL_pdpanel_new.c
--- hpl-2.0/src/panel/HPL_pdpanel_new.c	2011-05-31 15:59:58.883227386 +0200
+++ hpl-2.0PATCH/src/panel/HPL_pdpanel_new.c	2011-05-31 14:56:31.000000000 +0200
@@ -48,6 +48,7 @@
  * Include files
  */
 #include "hpl.h"
+#include <lama/lama_Error.h>
 
 #ifdef STDC_HEADERS
 void HPL_pdpanel_new
@@ -139,7 +140,9 @@ void HPL_pdpanel_new
 /*
  * Allocate the panel structure - Check for enough memory
  */
-   if( !( p = (HPL_T_panel *)malloc( sizeof( HPL_T_panel ) ) ) )
+   int lama_hostAlloc_success;
+   lama_hostAlloc_success = lama_hostAlloc((void**)&p, sizeof( HPL_T_panel ));
+   if( LAMA_STATUS_SUCCESS != lama_hostAlloc_success )
    {
       HPL_pabort( __LINE__, "HPL_pdpanel_new", "Memory allocation failed" );
    }
diff -rupN hpl-2.0/src/pauxil/HPL_pdlange.c hpl-2.0PATCH/src/pauxil/HPL_pdlange.c
--- hpl-2.0/src/pauxil/HPL_pdlange.c	2011-05-31 15:59:58.889227386 +0200
+++ hpl-2.0PATCH/src/pauxil/HPL_pdlange.c	2011-05-31 14:56:32.000000000 +0200
@@ -163,7 +163,7 @@ double HPL_pdlange
  */
       if( nq > 0 )
       {
-         work = (double*)malloc( (size_t)(nq) * sizeof( double ) );
+         lama_hostAlloc( (void**)&work,(size_t)(nq) * sizeof( double ) );
          if( work == NULL )
          { HPL_pabort( __LINE__, "HPL_pdlange", "Memory allocation failed" ); }
 
@@ -183,7 +183,7 @@ double HPL_pdlange
  */
          if( myrow == 0 )
          { v0 = work[HPL_idamax( nq, work, 1 )]; v0 = Mabs( v0 ); }
-         if( work ) free( work );
+         if( work ) lama_hostFree( work );
       }
 /*
  * Find max in row 0, store result in process (0,0)
@@ -199,7 +199,7 @@ double HPL_pdlange
  */
       if( mp > 0 )
       {
-         work = (double*)malloc( (size_t)(mp) * sizeof( double ) );
+         lama_hostAlloc((void**) &work, (size_t)(mp) * sizeof( double ) );
          if( work == NULL )
          { HPL_pabort( __LINE__, "HPL_pdlange", "Memory allocation failed" ); }
 
@@ -221,7 +221,7 @@ double HPL_pdlange
  */      
          if( mycol == 0 )
          { v0 = work[HPL_idamax( mp, work, 1 )]; v0 = Mabs( v0 ); }
-         if( work ) free( work );
+         if( work ) lama_hostFree( work );
       }
 /*
  * Find max in column 0, store result in process (0,0)
diff -rupN hpl-2.0/src/pauxil/HPL_pdlaprnt.c hpl-2.0PATCH/src/pauxil/HPL_pdlaprnt.c
--- hpl-2.0/src/pauxil/HPL_pdlaprnt.c	2011-05-31 15:59:58.896227386 +0200
+++ hpl-2.0PATCH/src/pauxil/HPL_pdlaprnt.c	2011-05-31 14:56:32.000000000 +0200
@@ -140,7 +140,7 @@ void HPL_pdlaprnt
    (void) HPL_grid_info( GRID, &nprow, &npcol, &myrow, &mycol );
    Acomm = GRID->all_comm; 
    if( ( myrow == 0 ) && ( mycol == 0 ) )
-      buf = (double*)malloc( (size_t)(NB) * sizeof( double ) );
+      lama_hostAlloc((void **) &buf, (size_t)(NB) * sizeof( double ));
 
    for( j = 0; j < N; j += NB )
    {
@@ -183,7 +183,7 @@ void HPL_pdlaprnt
       icurcol = MModAdd1( icurcol, npcol );
       (void) HPL_barrier( Acomm );
    }
-   if( ( myrow == 0 ) && ( mycol == 0 ) && ( buf ) ) free( buf );
+   if( ( myrow == 0 ) && ( mycol == 0 ) && ( buf ) ) lama_hostFree( buf );
 /*
  * End of HPL_pdlaprnt
  */
diff -rupN hpl-2.0/src/pfact/HPL_pdfact.c hpl-2.0PATCH/src/pfact/HPL_pdfact.c
--- hpl-2.0/src/pfact/HPL_pdfact.c	2011-05-31 15:59:58.903227386 +0200
+++ hpl-2.0PATCH/src/pfact/HPL_pdfact.c	2011-05-31 14:56:32.000000000 +0200
@@ -118,9 +118,7 @@ void HPL_pdfact
    HPL_ptimer( HPL_TIMING_RPFACT );
 #endif
    align = PANEL->algo->align;
-   vptr  = (void *)malloc( ( (size_t)(align) + 
-              (size_t)(((4+((unsigned int)(jb) << 1)) << 1) )) *
-              sizeof(double) );
+   lama_hostAlloc((void**)&vptr , ( (size_t)(align) +  (size_t)(((4+((unsigned int)(jb) << 1)) << 1) )) * sizeof(double) );
    if( vptr == NULL )
    { HPL_pabort( __LINE__, "HPL_pdfact", "Memory allocation failed" ); }
 /*
@@ -128,7 +126,7 @@ void HPL_pdfact
  */
    PANEL->algo->rffun( PANEL, PANEL->mp, jb, 0, (double *)HPL_PTR( vptr,
                        ((size_t)(align) * sizeof(double) ) ) );
-   if( vptr ) free( vptr );
+   if( vptr ) lama_hostFree( vptr );
 
    PANEL->A   = Mptr( PANEL->A, 0, jb, PANEL->lda );
    PANEL->nq -= jb; PANEL->jj += jb;
diff -rupN hpl-2.0/src/pgesv/HPL_pdgesv0.c hpl-2.0PATCH/src/pgesv/HPL_pdgesv0.c
--- hpl-2.0/src/pgesv/HPL_pdgesv0.c	2011-05-31 15:59:58.910227386 +0200
+++ hpl-2.0PATCH/src/pgesv/HPL_pdgesv0.c	2011-05-31 14:56:32.000000000 +0200
@@ -107,7 +107,7 @@ void HPL_pdgesv0
 /*
  * Allocate a panel list of length 1 - Allocate panel[0] resources
  */
-   panel = (HPL_T_panel **)malloc( sizeof( HPL_T_panel * ) );
+   lama_hostAlloc((void **) &panel, sizeof( HPL_T_panel * ));
    if( panel == NULL )
    { HPL_pabort( __LINE__, "HPL_pdgesv0", "Memory allocation failed" ); }
 
@@ -144,7 +144,7 @@ void HPL_pdgesv0
  */
    (void) HPL_pdpanel_disp( &panel[0] );
 
-   if( panel ) free( panel );
+   if( panel ) lama_hostFree( panel );
 /*
  * End of HPL_pdgesv0
  */
diff -rupN hpl-2.0/src/pgesv/HPL_pdgesvK1.c hpl-2.0PATCH/src/pgesv/HPL_pdgesvK1.c
--- hpl-2.0/src/pgesv/HPL_pdgesvK1.c	2011-05-31 15:59:58.916227386 +0200
+++ hpl-2.0PATCH/src/pgesv/HPL_pdgesvK1.c	2011-05-31 14:56:32.000000000 +0200
@@ -110,7 +110,7 @@ void HPL_pdgesvK1
 /*
  * Allocate a panel list of length depth + 1 (depth >= 1)
  */
-   panel = (HPL_T_panel **)malloc( (size_t)(depth+1)*sizeof( HPL_T_panel *) );
+   lama_hostAlloc((void **)&panel, (size_t)(depth+1)*sizeof( HPL_T_panel *) );
    if( panel == NULL )
    { HPL_pabort( __LINE__, "HPL_pdgesvK1", "Memory allocation failed" ); }
 /*
@@ -198,7 +198,7 @@ void HPL_pdgesvK1
       (void) HPL_pdpanel_disp( &panel[k] );
    }
  
-   if( panel ) free( panel );
+   if( panel ) lama_hostFree( panel );
 /*
  * End of HPL_pdgesvK1
  */
diff -rupN hpl-2.0/src/pgesv/HPL_pdgesvK2.c hpl-2.0PATCH/src/pgesv/HPL_pdgesvK2.c
--- hpl-2.0/src/pgesv/HPL_pdgesvK2.c	2011-05-31 15:59:58.924227386 +0200
+++ hpl-2.0PATCH/src/pgesv/HPL_pdgesvK2.c	2011-05-31 14:56:32.000000000 +0200
@@ -110,7 +110,7 @@ void HPL_pdgesvK2
 /*
  * Allocate a panel list of length depth + 1 (depth >= 1)
  */
-   panel = (HPL_T_panel **)malloc( (size_t)(depth+1) * sizeof( HPL_T_panel *) );
+   lama_hostAlloc((void **) &panel, (size_t)(depth+1) * sizeof( HPL_T_panel *) );
    if( panel == NULL )
    { HPL_pabort( __LINE__, "HPL_pdgesvK2", "Memory allocation failed" ); }
 /*
@@ -207,7 +207,7 @@ void HPL_pdgesvK2
    }
    (void) HPL_pdpanel_disp( &panel[depth] );
 
-   if( panel ) free( panel );
+   if( panel ) lama_hostFree( panel );
 /*
  * End of HPL_pdgesvK2
  */
diff -rupN hpl-2.0/src/pgesv/HPL_pdlaswp00N.c hpl-2.0PATCH/src/pgesv/HPL_pdlaswp00N.c
--- hpl-2.0/src/pgesv/HPL_pdlaswp00N.c	2011-05-31 15:59:58.931227386 +0200
+++ hpl-2.0PATCH/src/pgesv/HPL_pdlaswp00N.c	2011-05-31 14:56:32.000000000 +0200
@@ -149,8 +149,7 @@ void HPL_pdlaswp00N
 /*
  * Allocate space for temporary W (ldW * jb)
  */
-   vptr = (void*)malloc( 
-      ((size_t)(align) + ((size_t)(jb) * (size_t)(ldW))) * sizeof(double) );
+   lama_hostAlloc((void**) &vptr, ((size_t)(align) + ((size_t)(jb) * (size_t)(ldW))) * sizeof(double) );
    if( vptr == NULL )
    { HPL_pabort( __LINE__, "HPL_pdlaswp00N", "Memory allocation failed" ); }
 
@@ -417,7 +416,7 @@ void HPL_pdlaswp00N
       { (void) HPL_send( U, usize, partner, Cmsgid, comm ); }
    }
 
-   if( vptr ) free( vptr );
+   if( vptr ) lama_hostFree( vptr );
 /*
  * Probe for column panel - forward it when available 
  */
diff -rupN hpl-2.0/src/pgesv/HPL_pdlaswp00T.c hpl-2.0PATCH/src/pgesv/HPL_pdlaswp00T.c
--- hpl-2.0/src/pgesv/HPL_pdlaswp00T.c	2011-05-31 15:59:58.939227386 +0200
+++ hpl-2.0PATCH/src/pgesv/HPL_pdlaswp00T.c	2011-05-31 14:56:32.000000000 +0200
@@ -149,7 +149,7 @@ void HPL_pdlaswp00T
 /*
  * Allocate space for temporary W (ldW * jb)
  */
-   vptr = (void*)malloc( ( (size_t)(align) + 
+   lama_hostAlloc((void**)&vptr, ( (size_t)(align) + 
                            ((size_t)(jb) * (size_t)(ldW))) * 
                            sizeof(double) );
    if( vptr == NULL )
@@ -418,7 +418,7 @@ void HPL_pdlaswp00T
       { (void) HPL_send( U, usize, partner, Cmsgid, comm ); }
    }
 
-   if( vptr ) free( vptr );
+   if( vptr ) lama_hostFree( vptr );
 /*
  * Probe for column panel - forward it when available 
  */
diff -rupN hpl-2.0/src/pgesv/HPL_pdtrsv.c hpl-2.0PATCH/src/pgesv/HPL_pdtrsv.c
--- hpl-2.0/src/pgesv/HPL_pdtrsv.c	2011-05-31 15:59:58.948227386 +0200
+++ hpl-2.0PATCH/src/pgesv/HPL_pdtrsv.c	2011-05-31 14:56:32.000000000 +0200
@@ -159,7 +159,7 @@ void HPL_pdtrsv
    n1 = ( npcol - 1 ) * nb; n1 = Mmax( n1, nb );
    if( Anp > 0 )
    {
-      W = (double*)malloc( (size_t)(Mmin( n1, Anp )) * sizeof( double ) );
+      lama_hostAlloc( (void**)&W, (size_t)(Mmin( n1, Anp )) * sizeof( double ) );
       if( W == NULL )
       { HPL_pabort( __LINE__, "HPL_pdtrsv", "Memory allocation failed" ); }
       Wfr = 1;
@@ -286,7 +286,7 @@ void HPL_pdtrsv
       (void) HPL_broadcast( (void *)(XR), kbprev, HPL_DOUBLE, rowprev,
                             Ccomm );
 
-   if( Wfr  ) free( W  );
+   if( Wfr  ) lama_hostFree( W  );
 #ifdef HPL_DETAILED_TIMING
    HPL_ptimer( HPL_TIMING_PTRSV );
 #endif
diff -rupN hpl-2.0/testing/ptest/HPL_pddriver.c hpl-2.0PATCH/testing/ptest/HPL_pddriver.c
--- hpl-2.0/testing/ptest/HPL_pddriver.c	2011-05-31 15:59:58.957227386 +0200
+++ hpl-2.0PATCH/testing/ptest/HPL_pddriver.c	2011-05-31 14:56:32.000000000 +0200
@@ -67,6 +67,9 @@ int main( ARGC, ARGV )
    char                       * * ARGV;
 #endif
 {
+
+lama_init();
+
 /* 
  * Purpose
  * =======
diff -rupN hpl-2.0/testing/ptest/HPL_pdinfo.c hpl-2.0PATCH/testing/ptest/HPL_pdinfo.c
--- hpl-2.0/testing/ptest/HPL_pdinfo.c	2011-05-31 15:59:58.964227386 +0200
+++ hpl-2.0PATCH/testing/ptest/HPL_pdinfo.c	2011-05-31 14:56:32.000000000 +0200
@@ -638,7 +638,7 @@ label_error:
 /*
  * Broadcast array sizes
  */
-   iwork = (int *)malloc( (size_t)(15) * sizeof( int ) );
+lama_hostAlloc((void **)&iwork, (size_t)(15) * sizeof( int ));
    if( rank == 0 )
    {
       iwork[ 0] = *NS;      iwork[ 1] = *NBS;
@@ -658,13 +658,13 @@ label_error:
       *NDHS     = iwork[ 9]; *TSWAP = iwork[10]; *L1NOTRAN = iwork[11];
       *UNOTRAN  = iwork[12]; *EQUIL = iwork[13]; *ALIGN    = iwork[14];
    }
-   if( iwork ) free( iwork );
+   if( iwork ) lama_hostFree( iwork );
 /*
  * Pack information arrays and broadcast
  */
    lwork = (*NS) + (*NBS) + 2 * (*NPQS) + (*NPFS) + (*NBMS) + 
            (*NDVS) + (*NRFS) + (*NTPS) + (*NDHS) + 1;
-   iwork = (int *)malloc( (size_t)(lwork) * sizeof( int ) );
+   lama_hostAlloc((void **) &iwork,(size_t)(lwork) * sizeof( int ) );
    if( rank == 0 )
    {
       j = 0;
@@ -748,7 +748,7 @@ label_error:
       else if( iwork[j] == 2 ) *FSWAP = HPL_SW_MIX;
       j++;
    }
-   if( iwork ) free( iwork );
+   if( iwork ) lama_hostFree( iwork );
 /*
  * regurgitate input
  */
diff -rupN hpl-2.0/testing/ptest/HPL_pdtest.c hpl-2.0PATCH/testing/ptest/HPL_pdtest.c
--- hpl-2.0/testing/ptest/HPL_pdtest.c	2011-05-31 15:59:58.973227386 +0200
+++ hpl-2.0PATCH/testing/ptest/HPL_pdtest.c	2011-05-31 14:56:32.000000000 +0200
@@ -160,9 +160,8 @@ void HPL_pdtest
 /*
  * Allocate dynamic memory
  */
-   vptr = (void*)malloc( ( (size_t)(ALGO->align) + 
-                           (size_t)(mat.ld+1) * (size_t)(mat.nq) ) *
-                         sizeof(double) );
+   lama_hostAlloc((void**)&vptr,(size_t)(((ALGO->align) + (size_t)(mat.ld+1) * (size_t)(mat.nq) ) * sizeof(double)));
+   
    info[0] = (vptr == NULL); info[1] = myrow; info[2] = mycol;
    (void) HPL_all_reduce( (void *)(info), 3, HPL_INT, HPL_max,
                           GRID->all_comm );
@@ -311,7 +310,7 @@ void HPL_pdtest
  * Quick return, if I am not interested in checking the computations
  */
    if( TEST->thrsh <= HPL_rzero )
-   { (TEST->kpass)++; if( vptr ) free( vptr ); return; }
+   { (TEST->kpass)++; if( vptr ) lama_hostFree( vptr ); return; }
 /*
  * Check info returned by solve
  */
@@ -321,7 +323,7 @@ void HPL_pdtest
          HPL_pwarn( TEST->outfp, __LINE__, "HPL_pdtest", "%s %d, %s", 
                     "Error code returned by solve is", mat.info, "skip" );
       (TEST->kskip)++;
-      if( vptr ) free( vptr ); return;
+      if( vptr ) lama_hostFree( vptr ); return;
    }
 /*
  * Check computation, re-generate [ A | b ], compute norm 1 and inf of A and x,
@@ -421,7 +423,7 @@ void HPL_pdtest
          "||b||_oo . . . . . . . . . . . . . . . . . . . = ", BnormI );
       }
    }
-   if( vptr ) free( vptr );
+   if( vptr ) lama_hostFree( vptr );
 /*
  * End of HPL_pdtest
  */
diff -U 3 -H -b -w -B -E -d -r -N -- hpl-2.0/setup/Make.lama hpl-2.0Patch/setup/Make.lama
--- hpl-2.0/setup/Make.lama	1970-01-01 01:00:00.000000000 +0100
+++ hpl-2.0Patch/setup/Make.lama	2011-06-10 11:25:44.000000000 +0200
@@ -0,0 +1,204 @@
+#  
+#  -- High Performance Computing Linpack Benchmark (HPL)                
+#     HPL - 2.0 - September 10, 2008                          
+#     Antoine P. Petitet                                                
+#     University of Tennessee, Knoxville                                
+#     Innovative Computing Laboratory                                 
+#     (C) Copyright 2000-2008 All Rights Reserved                       
+#                                                                       
+#  -- Copyright notice and Licensing terms:                             
+#                                                                       
+#  Redistribution  and  use in  source and binary forms, with or without
+#  modification, are  permitted provided  that the following  conditions
+#  are met:                                                             
+#                                                                       
+#  1. Redistributions  of  source  code  must retain the above copyright
+#  notice, this list of conditions and the following disclaimer.        
+#                                                                       
+#  2. Redistributions in binary form must reproduce  the above copyright
+#  notice, this list of conditions,  and the following disclaimer in the
+#  documentation and/or other materials provided with the distribution. 
+#                                                                       
+#  3. All  advertising  materials  mentioning  features  or  use of this
+#  software must display the following acknowledgement:                 
+#  This  product  includes  software  developed  at  the  University  of
+#  Tennessee, Knoxville, Innovative Computing Laboratory.             
+#                                                                       
+#  4. The name of the  University,  the name of the  Laboratory,  or the
+#  names  of  its  contributors  may  not  be used to endorse or promote
+#  products  derived   from   this  software  without  specific  written
+#  permission.                                                          
+#                                                                       
+#  -- Disclaimer:                                                       
+#                                                                       
+#  THIS  SOFTWARE  IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+#  ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,  INCLUDING,  BUT NOT
+#  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+#  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE UNIVERSITY
+#  OR  CONTRIBUTORS  BE  LIABLE FOR ANY  DIRECT,  INDIRECT,  INCIDENTAL,
+#  SPECIAL,  EXEMPLARY,  OR  CONSEQUENTIAL DAMAGES  (INCLUDING,  BUT NOT
+#  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+#  DATA OR PROFITS; OR BUSINESS INTERRUPTION)  HOWEVER CAUSED AND ON ANY
+#  THEORY OF LIABILITY, WHETHER IN CONTRACT,  STRICT LIABILITY,  OR TORT
+#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+#  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
+# ######################################################################
+#  
+# ----------------------------------------------------------------------
+# - shell --------------------------------------------------------------
+# ----------------------------------------------------------------------
+#
+SHELL        = /bin/sh
+#
+CD           = cd
+CP           = cp
+LN_S         = ln -s
+MKDIR        = mkdir
+RM           = /bin/rm -f
+TOUCH        = touch
+#
+# ----------------------------------------------------------------------
+# - Platform identifier ------------------------------------------------
+# ----------------------------------------------------------------------
+#
+ARCH         = 
+#
+# ----------------------------------------------------------------------
+# - HPL Directory Structure / HPL library ------------------------------
+# ----------------------------------------------------------------------
+#
+TOPdir       = 
+INCdir       = $(TOPdir)/include
+BINdir       = $(TOPdir)/bin/$(ARCH)
+LIBdir       = $(TOPdir)/lib/$(ARCH)
+#
+HPLlib       = $(LIBdir)/libhpl.a 
+#
+# ----------------------------------------------------------------------
+# - Message Passing library (MPI) --------------------------------------
+# ----------------------------------------------------------------------
+# MPinc tells the  C  compiler where to find the Message Passing library
+# header files,  MPlib  is defined  to be the name of  the library to be
+# used. The variable MPdir is only used for defining MPinc and MPlib.
+#
+MPdir        = 
+MPinc        = 
+MPlib        = 
+#
+# ----------------------------------------------------------------------
+# - Linear Algebra library (BLAS or VSIPL) -----------------------------
+# ----------------------------------------------------------------------
+# LAinc tells the  C  compiler where to find the Linear Algebra  library
+# header files,  LAlib  is defined  to be the name of  the library to be
+# used. The variable LAdir is only used for defining LAinc and LAlib.
+#
+LAdir        = 
+LAlib        = 
+#
+# ----------------------------------------------------------------------
+# - CUDA library -------------------------------------------------------
+# ----------------------------------------------------------------------
+# CUDARTlib tells the  C  compiler where to find the CUDA Runtime library.
+# CUBLASlib tells the  C  compiler where to find the CUBLAS library.
+# The variable CUDAdir is only used for defining CUDARTlib and CUBLASlib.
+#
+CUDAdir      = 
+CUDARTlib    = 
+CUBLASlib    = 
+#
+# ----------------------------------------------------------------------
+# - LAMA library -------------------------------------------------------
+# ----------------------------------------------------------------------
+# LAMAinc tells the  C  compiler where to find the LAMA header files.
+# LAMAlib tells the  C  compiler where to find the LAMA library.
+# The variable LAMAdir is only used for defining LAMAinc and LAMAlib.
+#
+LAMAdir      = 
+LAMAinc      = 
+LAMAlib      = -llama
+#
+# ----------------------------------------------------------------------
+# - F77 / C interface --------------------------------------------------
+# ----------------------------------------------------------------------
+# You can skip this section  if and only if  you are not planning to use
+# a  BLAS  library featuring a Fortran 77 interface.  Otherwise,  it  is
+# necessary  to  fill out the  F2CDEFS  variable  with  the  appropriate
+# options.  **One and only one**  option should be chosen in **each** of
+# the 3 following categories:
+#
+# 1) name space (How C calls a Fortran 77 routine)
+#
+# -DAdd_              : all lower case and a suffixed underscore  (Suns,
+#                       Intel, ...),                           [default]
+# -DNoChange          : all lower case (IBM RS6000),
+# -DUpCase            : all upper case (Cray),
+# -DAdd__             : the FORTRAN compiler in use is f2c.
+#
+# 2) C and Fortran 77 integer mapping
+#
+# -DF77_INTEGER=int   : Fortran 77 INTEGER is a C int,         [default]
+# -DF77_INTEGER=long  : Fortran 77 INTEGER is a C long,
+# -DF77_INTEGER=short : Fortran 77 INTEGER is a C short.
+#
+# 3) Fortran 77 string handling
+#
+# -DStringSunStyle    : The string address is passed at the string loca-
+#                       tion on the stack, and the string length is then
+#                       passed as  an  F77_INTEGER  after  all  explicit
+#                       stack arguments,                       [default]
+# -DStringStructPtr   : The address  of  a  structure  is  passed  by  a
+#                       Fortran 77  string,  and the structure is of the
+#                       form: struct {char *cp; F77_INTEGER len;},
+# -DStringStructVal   : A structure is passed by value for each  Fortran
+#                       77 string,  and  the  structure is  of the form:
+#                       struct {char *cp; F77_INTEGER len;},
+# -DStringCrayStyle   : Special option for  Cray  machines,  which  uses
+#                       Cray  fcd  (fortran  character  descriptor)  for
+#                       interoperation.
+#
+F2CDEFS      =
+#
+# ----------------------------------------------------------------------
+# - HPL includes / libraries / specifics -------------------------------
+# ----------------------------------------------------------------------
+#
+HPL_INCLUDES = -I$(INCdir) -I$(INCdir)/$(ARCH) $(MPinc) $(LAMAinc)
+HPL_LIBS     = $(HPLlib) $(LAlib) $(MPlib) $(CUDARTlib) $(CUBLASlib) $(LAMAlib)
+#
+# - Compile time options -----------------------------------------------
+#
+# -DHPL_COPY_L           force the copy of the panel L before bcast;
+# -DHPL_CALL_CBLAS       call the cblas interface;
+# -DHPL_CALL_VSIPL       call the vsip  library;
+# -DHPL_DETAILED_TIMING  enable detailed timers;
+#
+# By default HPL will:
+#    *) not copy L before broadcast,
+#    *) call the BLAS Fortran 77 interface,
+#    *) not display detailed timing information.
+#
+HPL_OPTS     = -DHPL_CALL_CBLAS
+#
+# ----------------------------------------------------------------------
+#
+HPL_DEFS     = $(F2CDEFS) $(HPL_OPTS) $(HPL_INCLUDES)
+#
+# ----------------------------------------------------------------------
+# - Compilers / linkers - Optimization flags ---------------------------
+# ----------------------------------------------------------------------
+#
+CC           = gcc
+CCNOOPT      = $(HPL_DEFS)
+CCFLAGS      = $(HPL_DEFS) -fomit-frame-pointer -O3 -funroll-loops
+#
+# On some platforms,  it is necessary  to use the Fortran linker to find
+# the Fortran internals used in the BLAS library.
+#
+LINKER       = gcc
+LINKFLAGS    = $(CCFLAGS)
+#
+ARCHIVER     = ar
+ARFLAGS      = r
+RANLIB       = echo
+#
+# ----------------------------------------------------------------------
