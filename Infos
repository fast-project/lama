
Shared Pointers
===============

* LAMA takes heavy use of shared pointers so ownership can be kept at 
  different places and delete/destructor is called when all pointers are reset

* LAMA uses std::shared_ptr (C++11), for portability we use common::shared_ptr
  (where shared_ptr might be implemented by boost::shared_ptr)

* #include <common/shared_ptr.hpp> has the correct replacement

* Weak pointers can also be used in the same way 

Unique Pointers
===============

* Preferred to shared pointer whenever ownership is clearly limited within
  one object or one scope

* Should be used instead of usual pointer to make sure that object is deleted
  in case of exceptions ( and avoids garbage in case of delete has been forgotten)

* Not recommended when ownership changes ( pointer assignment, argument or result
  of functions)

* Container can use unique_ptr, but not the auto_ptr. LAMA does not use it. Only
  vector of shared pointers should be used.

* LAMA uses std::unique_ptr (C++11) for portability we use common::unique_ptr
  (where unique_ptr might be implemented by std::auto_ptr)

Scoped Array
============

* Light alternative to std::vector even if less flexible

* Same as unique_ptr but for new of arrays.

* Same rules for using it apply as for unique pointers (never argument,
  result, or use in container)

* std::unique_ptr (C++11) can be used like scoped_array

   boost::scoped_array<Dummy> X( new Dummy[10] );
   std::unique_ptr<Dummy[]> X( new Dummy[10] );

* LAMA uses common::unique_ptr (either implemented by std::unique_ptr
  or boost::interprocess::unique_ptr

Some Remarks
============

* Keep always pointers (as result of new or other create methods) 
* Only used shared_ptr or 
* In containers (vector, queue, etc) only shared_ptr should be used.


ToDo
====

- Extension of getScalarType for new types
- getScalarTypeSize : routine make no sense, should be removed

Next Steps
==========

LAMAArray:

 * What about two- and three-dimensional arrays

LAMAArrayView:
 
 * How to deal with it
 * WriteAccess: how to deal with small sections 

LAMAInterface:

 * Not one large interface, but many ones, extendible
 * each application might use its own interface

LAMA_CONTEXT:

  * context is set globally
  * ReadAccess, WriteAccess for this context (as default, instead Host)
  * acceses for context are counted
  * push implicitly to other context if interface routine is not available
 
  + currently not obvious how changing context works (context variable in macro!!)

ScaLAPack:

  * This should be done by LAMA

